datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  password    String
  firstname   String?
  lastname    String?
  phone       String?
  email       String?  @unique
  avatar      String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      Status   @default(ACTIVE)

  spaceMembership SpaceMembership[] 
}

enum SpaceType {
  TEAM
  PROJECT
  DIRECTORY
}
model Space {
  id              Int       @id @default(autoincrement())
  name            String
  spaceId          String    @default(uuid())
  logo            String?  
  banner          String?  
  slogan          String?
  manifesto       String?
  parentId        Int? 
  canCreateRoles  Boolean?  @default(true)
  type            SpaceType? @default(TEAM)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  spaceMembership  SpaceMembership[] 
  spaceRole SpaceRole[]

  Announcements Announcements[]

  FormModule FormModule[]
}


model SpaceMembership {
  id        Int       @id @default(autoincrement())
  userId    Int
  spaceId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    Status    @default(ACTIVE)
  space      Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade,onUpdate: Cascade)
  user      User      @relation(fields: [userId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  spaceMembershipRole SpaceMembershipRole[]

  AnnouncementsRead AnnouncementsRead[]

  FormSpaceMembers FormSpaceMembers[]
}


enum Status {
  ACTIVE
  INACTIVE
  BAN
}

model SpaceRole {
  id                  Int                    @id @default(autoincrement())
  name                String            
  description         String?     
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  spaceId             Int?
  space               Space?     @relation(fields: [spaceId], references: [id], onDelete: Cascade) 
  spaceMembershipRole SpaceMembershipRole[]   @relation("spaceRoleMembership")
  spaceRoleActions    SpaceRoleActions[]      @relation("RoleActions")
  parentId            Int?     
}

model SpaceActions {
  id           Int                @id @default(autoincrement())
  name         String             
  description  String?
  action       String             @unique
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  spaceRoleActions SpaceRoleActions[] @relation("RoleActions")
}

model SpaceRoleActions {
  id                Int         @id @default(autoincrement())
  roleId            Int
  actionId          Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  spaceRole          SpaceRole    @relation("RoleActions", fields: [roleId], references: [id])
  spaceAction        SpaceActions @relation("RoleActions", fields: [actionId], references: [id])
}


model SpaceMembershipRole {
  id                 Int             @id @default(autoincrement())
  spaceMembershipId  Int
  roleId             Int
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  spaceMembership     SpaceMembership  @relation(fields: [spaceMembershipId], references: [id], onDelete: Cascade)
  spaceRole           SpaceRole        @relation("spaceRoleMembership", fields: [roleId], references: [id])
}

model Announcements {
  id                 Int      @id @default(autoincrement())
  spaceId            Int
  title              String
  content            String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  expirationDate     DateTime?

  space           Space     @relation(fields: [spaceId], references: [id])
  readByUsers     AnnouncementsRead[]
}


model AnnouncementsRead {
  id              Int       @id @default(autoincrement())
  memberId        Int
  announcementId  Int
  readAt          DateTime  @default(now())

  member            SpaceMembership      @relation(fields: [memberId], references: [id])
  announcement      Announcements   @relation(fields: [announcementId], references: [id])
}

enum FormStatus {
  ACTIVE
  BUILDING
  PUBLISHED
  DISABLED
}
model FormModule {
  id          Int       @id @default(autoincrement())
  title       String
  status      FormStatus? @default(BUILDING)
  spaceId     Int
  fields      Json?
  settings    Json?

  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  Space           Space     @relation(fields: [spaceId], references: [id])
  FormSubmitions FormSubmitions[]

  FormSpaceMembers FormSpaceMembers[]
}
enum FormSpaceMembersRole {
  OWNER
  MEMBER
  REPORT_VIEWER
}
model FormSpaceMembers {
  id      Int @id @default(autoincrement())
  spaceMemberId Int
  formId  Int
  Role    FormSpaceMembersRole @default(MEMBER)
  SpaceMembership     SpaceMembership  @relation(fields: [spaceMemberId], references: [id], onDelete: Cascade)
  Form     FormModule  @relation(fields: [formId], references: [id], onDelete: Cascade)

  FormSubmitions FormSubmitions[]
}
model FormSubmitions {
  id        Int @id @default(autoincrement())
  formId    Int
  formMemberId  Int
  data      Json    
  createdAt DateTime @default(now())

  FormMember    FormSpaceMembers @relation(fields: [formMemberId], references: [id], onDelete: Cascade)
  Form      FormModule    @relation(fields: [formId], references: [id], onDelete: Cascade)
}